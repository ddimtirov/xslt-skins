<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="bbcode.xsl"?>

<test>
    [h1]Overview[/h1]
    [p]
        This template provides common build process for Vodaphone Appli's. It would compile,
        preverify and package your classes according to MIDP and Vodafone specifications.
        Currently it does not handle resource compilation and remote deployment, but it could
        be easily modified to.
    [/p][p]
        To use the template the user will need Ant 1.6+, in order to use the [code]import[/code],
        [code]antlib[/code] and [code]macrodef[/code] tasks
        (see the [a href="#sample-build" title="Sample build script"]sample build[/a]).
        Also best results could be achieved if the code is layed out according to
        [a href="#project-layout" title="Project Layout"]this layout[/a].
    [/p][p]
        The build process provides pre and post-target hooks, where you can execute your custom code
        ([a href="#pre-post-targets" title="pre/post-target hooks description."]more...[/a]).
    [/p][p]
        This template defines many properties, and provides rich model for overriding them. Be
        sure to check the rules before modifying already written build script
        ([a href="#property-overrides" title="property overrides"]more...[/a]).
    [/p]
        
    [h1 id="pre-post-targets"]Pre &amp; Post Target Hooks[/h1]
    [p]
        The pre-targets are executed before the template-target (e.g. [code]pre-build[/code] is
        executed each time before ant executes [code]voda-build[/code]). The post-targets are the
        tasks defined in your build file's target
        (see [a href="#sample-build" title="Sample build script"]sample build script[/a])
    [/p][p]
        Here are some examples for what you can do with pre/post targets:
    [/p]
    [ul]
        [li][code]pre-build[/code] - generate/preprocess java sources.[/li]
        [li][code]post-build[/code] - compile resources.[/li]
        [li][code]pre-package[/code] - not sure, but I put it for the sake of uniformity ;-)[/li]
        [li][code]post-package[/code] - perform some JAD postprocessing or deploy to remote server.[/li]
        [li][code]pre-clean[/code] - shutdown processes holding locks onto build artifacts.[/li]
        [li][code]post-clean[/code] - clean custom build artifacts.[/li]
    [/ul]
        
    [ul]
        [li]pre-build - generate/preprocess java sources.[/li]
        [li]post-build - compile resources.[/li]
        [li]pre-package - not sure, but I put it for the sake of uniformity ;-)[/li]
        [li]post-package - perform some JAD postprocessing or deploy to remote server.[/li]
        [li]pre-clean - shutdown processes holding locks onto build artifacts.[/li]
        [li]post-clean - clean custom build artifacts.[/li]
    [/ul]
        
        
    [h1 id="property-overrides"]Property Overrides[/h1]
    [p]
        Properties in Ant have a [em]'first defined wins'[/em] semantics, this means that if a property is already
        defined, all subsequent definitions of the same property are ignored. Keeping this in mind here is a list of
        the property-definition priorities (highest wins):
    [/p]
    [ol]
        [li]Ant command line[/li]
        [li]Any properties set in user's build.xml before importing build_voda.xml[/li]
        [li]Properties defined in build.property file, located in the same folder as build_voda.xml[/li]
        [li]Default property values set in build_voda.xml (some of them initialized from OS environment)[/li]
        [li]Any properties set in user's build.xml after importing build_voda.xml[/li]
    [/ol]
        
        
    [h1 id="project-layout"]Project Layout[/h1]
    [pre]
    [b]&lt;project-root&gt;[/b]
     [b]|- src          [/b] Java source files.
     [b]|- res          [/b] Resource source files (images, sounds, texts.)
     [b]|               [/b]
     [b]|- build        [/b] Build scripts and build libraries.
     [b]|  |- build.xml [/b] Application build file.
     [b]|  |- ...       [/b] Additional files needed by the build proces (jars, antlibs,
     [b]|  |- ...       [/b] property files you can also put this template here)

  == == the following files are generated during the build process == == == == == == ==

     [b]|- target        [/b] Root for all files generated by build process.
     [b]|  |- classes    [/b] Compiled class files
     [b]|  |- preverified[/b] Preverified class files (these files are packaged in the JAR file)
     [b]|  |- res        [/b] Compiled resources (these files are packaged in the JAR file)
     [b]|  |- bin        [/b] Local deployment dir (the jar and the jad file are copied here)
    [/pre]


    [h1 id="mandatory-properties"]Mandatory Properties[/h1]
    [ul]
        [li]
            [code]app.manifest.midlet.class[/code] should be set to the name of the MIDlet class,
            which is an entry point for the appli.
        [/li]
        [li]
            [code]voda.home[/code] should be set to the directory where Voda SDK is installed.
            If missing, the value of the environment variable VODA_HOME is used.
        [/li]
    [/ul]


    [h1 id="sample-build"]Mimimum Sample Build[/h1]
    [pre]
    <![CDATA[
    <project name="minimum-voda-build" default="all">
        <property name="app.manifest.midlet.class" value="HelloWorldMidlet"/>
        <import file="build_voda.xml"/>

        <target name="build"   depends="voda-build" />
        <target name="package" depends="voda-package"/>
        <target name="clean"   depends="voda-clean"/>

        <target name="all"     depends="build, package"/>
        <target name="rebuild" depends="clean, all"/>
    </project>
    ]]>
    [/pre]

    [h2]Notes:[/h2]
    [small]
    [p]
        This build assumes that your project is using the default layout. You'd need to
        define some more variables if your project structure differs.
    [/p][p]
        This build does not handle resources. You should compile your resources in the [code]compile[/code] target
        and place them in the directory, pointed by [code]app.res.compiled.dir[/code] property in order to be
        properly packaged.
    [/p][p]
        This build does not define the [code]voda.home[/code] property, so it would default to
        [code]VODA_HOME[/code] environment entry. Or alternatively could be passed in build.properties or
        the command line.
    [/p][p]
        This build does not handle remote deployment. Put your deployment tasks in the [code]package[/code] target
        where they will be executed after successfull packaging.
    [/p]
    [/small]
</test>