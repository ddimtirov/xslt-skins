<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="ant-skin.xsl"?>

<project name="voda-template" default="abstract"
    xmlns:antenna="http://antenna.sourceforge.net"
    xmlns:html="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
    >
    <description>
        [h1]Overview[/h1]
        [p]
            This template provides common build process for Vodaphone Appli's. It would compile,
            preverify and package your classes according to MIDP and Vodafone specifications.
            Currently it does not handle resource compilation and remote deployment, but it could
            be easily modified to.
        [/p][p]
            To use the template the user will need Ant 1.6+, in order to use the [code]import[/code],
            [code]antlib[/code] and [code]macrodef[/code] tasks
            (see the [a href="#sample-build" title="Sample build script"]sample build[/a]).
            Also best results could be achieved if the code is layed out according to
            [a href="#project-layout" title="Project Layout"]this layout[/a].
        [/p][p]
            The build process provides pre and post-target hooks, where you can execute your custom code
            ([a href="#pre-post-targets" title="pre/post-target hooks description."]more...[/a]).
        [/p][p]
            This template defines many properties, and provides rich model for overriding them. Be
            sure to check the rules before modifying already written build script
            ([a href="#property-overrides" title="property overrides"]more...[/a]).
        [/p]
            
        [h1 id="pre-post-targets"]Pre &amp; Post Target Hooks[/h1]
        [p]
            The pre-targets are executed before the template-target (e.g. [code]pre-build[/code] is
            executed each time before ant executes [code]voda-build[/code]). The post-targets are the
            tasks defined in your build file's target
            (see [a href="#sample-build" title="Sample build script"]sample build script[/a])
        [/p][p]
            Here are some examples for what you can do with pre/post targets:
        [/p]
        [ul]
            [li][code]pre-build[/code] - generate/preprocess java sources.[/li]
            [li][code]post-build[/code] - compile resources.[/li]
            [li][code]pre-package[/code] - not sure, but I put it for the sake of uniformity ;-)[/li]
            [li][code]post-package[/code] - perform some JAD postprocessing or deploy to remote server.[/li]
            [li][code]pre-clean[/code] - shutdown processes holding locks onto build artifacts.[/li]
            [li][code]post-clean[/code] - clean custom build artifacts.[/li]
        [/ul]
            
        [ul]
            [li]pre-build - generate/preprocess java sources.[/li]
            [li]post-build - compile resources.[/li]
            [li]pre-package - not sure, but I put it for the sake of uniformity ;-)[/li]
            [li]post-package - perform some JAD postprocessing or deploy to remote server.[/li]
            [li]pre-clean - shutdown processes holding locks onto build artifacts.[/li]
            [li]post-clean - clean custom build artifacts.[/li]
        [/ul]
            
            
        [h1 id="property-overrides"]Property Overrides[/h1]
        [p]
            Properties in Ant have a [em]'first defined wins'[/em] semantics, this means that if a property is already
            defined, all subsequent definitions of the same property are ignored. Keeping this in mind here is a list of
            the property-definition priorities (highest wins):
        [/p]
        [ol]
            [li]Ant command line[/li]
            [li]Any properties set in user's build.xml before importing build_voda.xml[/li]
            [li]Properties defined in build.property file, located in the same folder as build_voda.xml[/li]
            [li]Default property values set in build_voda.xml (some of them initialized from OS environment)[/li]
            [li]Any properties set in user's build.xml after importing build_voda.xml[/li]
        [/ol]
            
            
        [h1 id="project-layout"]Project Layout[/h1]
        [pre]
        [b]&lt;project-root&gt;[/b]
         [b]|- src          [/b] Java source files.
         [b]|- res          [/b] Resource source files (images, sounds, texts.)
         [b]|               [/b]
         [b]|- build        [/b] Build scripts and build libraries.
         [b]|  |- build.xml [/b] Application build file.
         [b]|  |- ...       [/b] Additional files needed by the build proces (jars, antlibs,
         [b]|  |- ...       [/b] property files you can also put this template here)

      == == the following files are generated during the build process == == == == == == ==

         [b]|- target        [/b] Root for all files generated by build process.
         [b]|  |- classes    [/b] Compiled class files
         [b]|  |- preverified[/b] Preverified class files (these files are packaged in the JAR file)
         [b]|  |- res        [/b] Compiled resources (these files are packaged in the JAR file)
         [b]|  |- bin        [/b] Local deployment dir (the jar and the jad file are copied here)
        [/pre]


        [h1 id="mandatory-properties"]Mandatory Properties[/h1]
        [ul]
            [li]
                [code]app.manifest.midlet.class[/code] should be set to the name of the MIDlet class,
                which is an entry point for the appli.
            [/li]
            [li]
                [code]voda.home[/code] should be set to the directory where Voda SDK is installed.
                If missing, the value of the environment variable VODA_HOME is used.
            [/li]
        [/ul]


        [h1 id="sample-build"]Mimimum Sample Build[/h1]
        [pre]
        <![CDATA[
        <project name="minimum-voda-build" default="all">
            <property name="app.manifest.midlet.class" value="HelloWorldMidlet"/>
            <import file="build_voda.xml"/>

            <target name="build"   depends="voda-build" />
            <target name="package" depends="voda-package"/>
            <target name="clean"   depends="voda-clean"/>

            <target name="all"     depends="build, package"/>
            <target name="rebuild" depends="clean, all"/>
        </project>
        ]]>
        [/pre]

        [h2]Notes:[/h2]
        [small]
        [p]
            This build assumes that your project is using the default layout. You'd need to
            define some more variables if your project structure differs.
        [/p][p]
            This build does not handle resources. You should compile your resources in the [code]compile[/code] target
            and place them in the directory, pointed by [code]app.res.compiled.dir[/code] property in order to be
            properly packaged.
        [/p][p]
            This build does not define the [code]voda.home[/code] property, so it would default to
            [code]VODA_HOME[/code] environment entry. Or alternatively could be passed in build.properties or
            the command line.
        [/p][p]
            This build does not handle remote deployment. Put your deployment tasks in the [code]package[/code] target
            where they will be executed after successfull packaging.
        [/p]
        [/small]
    </description>



<!-- ## Task, Macro and Preset definitions ######################################################################### -->

    <dirname property="voda.build-template.dir" file="${ant.file.voda-template}"
        description="Find this file's directory (used for relative loading of resources)."/>

    <property description="Antenna library JAR file" name="antenna.jar.filename" value="${voda.build-template.dir}/antenna-bin.jar"/>
    <taskdef description="Antenna jad task"       name="jad"       classname="de.pleumann.antenna.WtkJad"       classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>
    <taskdef description="Antenna build task"     name="build"     classname="de.pleumann.antenna.WtkBuild"     classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>
    <taskdef description="Antenna package task"   name="package"   classname="de.pleumann.antenna.WtkPackage"   classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>
    <taskdef description="Antenna obfuscate task" name="obfuscate" classname="de.pleumann.antenna.WtkObfuscate" classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>
    <taskdef description="Antenna run task"       name="run"       classname="de.pleumann.antenna.WtkRun"       classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>
    <taskdef description="Antenna preverify task" name="preverify" classname="de.pleumann.antenna.WtkPreverify" classpath="${antenna.jar.filename}" uri="http://antenna.sourceforge.net"/>

    <macrodef name="check-api" description="Fails if specified classpath doesn't contain the specified class." >
        <attribute name="api"       description="The user-friendly name of the API being checked"/>
        <attribute name="classname" description="The classname of the test class."/>
        <attribute name="classpath" description="The classpath providing the API."/>
        <sequential>
            <available property="exists.@{api}" classpath="@{classpath}" classname="@{classname}"/>
            <fail unless="exists.@{api}" message="ERROR: @{api} API check failed (@{classpath})"/>
        </sequential>
    </macrodef>



<!-- ## Properties ################################################################################################# -->

    <!--  User overrides  -->
    <property file="${voda.build-template.dir}/build.properties" description="Import user overrides." />
    <property environment="env"                                  description="Import system environment properties."/>

    <!--  Vodaphone SDK  -->
    <property name="voda.home" value="${env.VODA_HOME}"                 description="The directory you have installed Vodafone SDK. (default takes the environment variable VODA_HOME)"/>
    <property name="voda.api"  value="${voda.home}/lib/stubclasses.zip" description="The API classes of the Vodafone profile."/>

    <!--  Build paths  -->
    <property name="app.src.dir"            value="${basedir}/src"                  description="Source files directory."/>
    <property name="app.res.dir"            value="${basedir}/res"                  description="Resource sources directory."/>
    <property name="app.target.dir"         value="${basedir}/target"               description="Target directory, where to put all the artifacts produced by build process."/>
    <property name="app.res.compiled.dir"   value="${app.target.dir}/res"           description="Compiled resources directory."/>
    <property name="app.classes.dir"        value="${app.target.dir}/classes"       description="Compiled class files directory."/>
    <property name="app.preverified.dir"    value="${app.target.dir}/preverified"   description="Preverified class files directory."/>
    <property name="app.deploy.local.dir"   value="${app.target.dir}/bin"           description="Deployable artifacts directory."/>

   <!--  Build manifest entries -->
    <fail description="The app.manifest.midlet.class property MUST be defined."
        unless="app.manifest.midlet.class" message="ERROR: Unspecified property $${app.manifest.midlet.class}"/>

    <property name="app.manifest.name"          value="${ant.project.name}" description="The user friendly name of the midlet suite"/>
    <property name="app.manifest.vendor"        value="GBW (unreleased)"    description="Midlet suite vendor."/>
    <property name="app.manifest.datasize"      value="0"                   description="Midlet suite data size."/>
    <property name="app.manifest.ver"           value="1.0.0"               description="Midlet suite version included in the JAR manifest and JAD file."/>
    <property name="app.manifest.midlet.name"   value="${app.manifest.midlet.class}" description="The user friendly name of the midlet."/>

    <!--  Others  -->
    <property name="app.compile.debug" value="off"                  description="Whether to compile classes with debug information [on|off]."/>
    <property name="app.name"          value="${ant.project.name}"  description="Project name, used for generation of the other default names."/>
    <property name="app.jar.filename"         value="${app.name}.jar"       description="Filename of the JAR file."/>
    <property name="app.jad.filename.local"   value="${app.name}-local.jad" description="Filename of the JAD file for local deployment."/>
    <property name="app.jad.filename.remote"  value="${app.name}.jad"       description="Filename of the JAD file for remote deployment."/>



<!-- ## Abstract targets ########################################################################################### -->

    <target name="pre-build"    description="Abstract target. Override to define custom pre-build step."/>
    <target name="pre-package"  description="Abstract target. Override to define custom pre-package step."/>
    <target name="pre-clean"    description="Abstract target. Override to define custom pre-clean step."/>



<!-- ## Targets #################################################################################################### -->

    <target name="voda-build" depends="pre-build" description="Compiles application sources.">
        <check-api api="midp" classpath="${voda.api}" classname="javax.microedition.midlet.MIDlet" description="Check MIDP API"/>
        <check-api api="jblend" classpath="${voda.api}" classname="com.jblend.media.smaf.phrase.AudioPhrase"  description="Check SMAF Player API"/>

        <mkdir dir="${app.classes.dir}" description="Create new folder for class files."/>
        <javac description="Compile java sources."
            bootclasspath="${voda.api}"
            srcdir="${app.src.dir}"
            destdir="${app.classes.dir}"
            debug="${app.compile.debug}"
            />

        <mkdir dir="${app.preverified.dir}" description="Create new folder for preverified classes."/>
        <exec description="Preverify compiled classes for J2ME compliance."
            executable="${voda.home}/bin/preverify.exe" failonerror="true">
            <arg value="-classpath" />
            <arg value="${voda.api}" />
            <arg value="-d" />
            <arg value="${app.preverified.dir}" />
            <arg value="-cldc" />
            <arg value="-nonative" />
            <arg value="-nofp" />
            <arg value="${app.classes.dir}" />
        </exec>
        <mkdir dir="${app.res.compiled.dir}"  description="Create new folder for compiled resources."/>
    </target>

    <target name="voda-package" depends="pre-package" description="Packages the appli and deploys it to a local dir.">
        <mkdir dir="${app.deploy.local.dir}" description="Create local deployment dir." />

        <buildnumber description="Increase build number for this machine." file="${app.name}-build-number.txt"/>
        <manifest description="Create manifest file, containing all the static J2ME Application Descriptor (JAD) fields
            (the ones that do not depend on the actual JAR or deploument parameters.) We'll use this file as JAR manifest
            and after packaging will update it to include the JAR size."
            file="${app.deploy.local.dir}/${app.jad.filename.local}" >
            <attribute name="Build-Id" value="project: ${ant.project.name}; build: ${build.number} by ${user.name}"/>
            <attribute name="MicroEdition-Configuration" value="CLDC-1.0" />
            <attribute name="MicroEdition-Profile" value="MIDP-1.0" />
            <attribute name="MIDlet-Application-Range" value="0,0" />

            <attribute name="MIDlet-Vendor" value="${app.manifest.vendor}" />
            <attribute name="MIDlet-Name" value="${app.manifest.name}" />
            <attribute name="MIDlet-Version" value="${app.manifest.ver}" />
            <attribute name="MIDlet-Data-Size" value="${app.manifest.datasize}"/>
            <attribute name="MIDlet-1" value="${app.manifest.midlet.name},,${app.manifest.midlet.class}" />
        </manifest>

        <jar description="Package preverified classes and resources into application JAR archive."
            destfile="${app.deploy.local.dir}/${app.jar.filename}"
            manifest="${app.deploy.local.dir}/${app.jad.filename.local}"
            >
            <fileset dir="${app.preverified.dir}" />
            <fileset dir="${app.res.compiled.dir}" />
        </jar>

        <antenna:jad description="Update the JAD with data specific to the current build."
            jadfile="${app.deploy.local.dir}/${app.jad.filename.local}"
            jarfile="${app.deploy.local.dir}/${app.jar.filename}"
            update="yes"
            />
    </target>

    <target name="voda-clean" depends="pre-clean" description="Remove all the files generated from the build process.">
        <delete dir="${app.target.dir}" description="Delete target dir."/>
    </target>

</project>